"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Hash, Download, Copy, RefreshCw, Calendar, Package, FileText } from "lucide-react"
import { toast } from "sonner"

interface BatchData {
  id: string
  batchNumber: string
  type: 'production' | 'material' | 'quality' | 'shipment'
  prefix: string
  sequence: number
  date: string
  description: string
  quantity: number
  status: 'active' | 'completed' | 'cancelled'
  metadata: Record<string, string>
  timestamp: string
}

interface BatchConfig {
  type: 'production' | 'material' | 'quality' | 'shipment'
  prefix: string
  dateFormat: 'YYYYMMDD' | 'YYMMDD' | 'MMDDYY' | 'DDMMYY'
  includeDate: boolean
  includeTime: boolean
  sequenceLength: number
  startSequence: number
  separator: string
  count: number
}

const batchTypes = [
  { id: 'production', name: 'Production Batch', prefix: 'PROD', color: 'bg-blue-100 text-blue-800' },
  { id: 'material', name: 'Material Batch', prefix: 'MAT', color: 'bg-green-100 text-green-800' },
  { id: 'quality', name: 'Quality Batch', prefix: 'QC', color: 'bg-orange-100 text-orange-800' },
  { id: 'shipment', name: 'Shipment Batch', prefix: 'SHIP', color: 'bg-purple-100 text-purple-800' }
]

export default function BatchGeneratorPage() {
  const [batches, setBatches] = useState<BatchData[]>([])
  const [config, setConfig] = useState<BatchConfig>({
    type: 'production',
    prefix: 'PROD',
    dateFormat: 'YYYYMMDD',
    includeDate: true,
    includeTime: false,
    sequenceLength: 4,
    startSequence: 1,
    separator: '-',
    count: 1
  })
  const [description, setDescription] = useState("")
  const [quantity, setQuantity] = useState(100)

  const formatDate = (date: Date, format: string): string => {
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    
    switch (format) {
      case 'YYYYMMDD': return `${year}${month}${day}`
      case 'YYMMDD': return `${String(year).slice(-2)}${month}${day}`
      case 'MMDDYY': return `${month}${day}${String(year).slice(-2)}`
      case 'DDMMYY': return `${day}${month}${String(year).slice(-2)}`
      default: return `${year}${month}${day}`
    }
  }

  const formatTime = (date: Date): string => {
    const hours = String(date.getHours()).padStart(2, '0')
    const minutes = String(date.getMinutes()).padStart(2, '0')
    return `${hours}${minutes}`
  }

  const generateBatchNumber = (sequence: number): string => {
    const now = new Date()
    let parts: string[] = [config.prefix]
    
    if (config.includeDate) {
      parts.push(formatDate(now, config.dateFormat))
    }
    
    if (config.includeTime) {
      parts.push(formatTime(now))
    }
    
    const paddedSequence = String(sequence).padStart(config.sequenceLength, '0')
    parts.push(paddedSequence)
    
    return parts.join(config.separator === 'none' ? '' : config.separator)
  }

  const generateBatches = () => {
    if (config.count <= 0 || config.count > 50) {
      toast.error("Please enter a valid count between 1 and 50")
      return
    }

    const newBatches: BatchData[] = []
    const now = new Date()
    
    for (let i = 0; i < config.count; i++) {
      const sequence = config.startSequence + i
      const batchNumber = generateBatchNumber(sequence)
      
      const batch: BatchData = {
        id: `batch-${now.getTime()}-${i}`,
        batchNumber,
        type: config.type,
        prefix: config.prefix,
        sequence,
        date: now.toISOString().split('T')[0],
        description: description || `${config.type} batch ${sequence}`,
        quantity,
        status: 'active',
        metadata: {
          'Generated By': 'Batch Generator',
          'Generation Time': now.toLocaleString(),
          'Sequence': sequence.toString(),
          'Type': config.type
        },
        timestamp: now.toISOString()
      }
      
      newBatches.push(batch)
    }
    
    setBatches(prev => [...newBatches, ...prev])
    setConfig(prev => ({ ...prev, startSequence: prev.startSequence + prev.count }))
    toast.success(`Generated ${config.count} batch number${config.count > 1 ? 's' : ''}`)
  }

  const updateBatchStatus = (id: string, status: 'active' | 'completed' | 'cancelled') => {
    setBatches(prev => prev.map(batch => 
      batch.id === id ? { ...batch, status } : batch
    ))
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast.success("Batch number copied to clipboard")
  }

  const exportBatches = () => {
    const csvContent = [
      'Batch Number,Type,Date,Description,Quantity,Status,Generated',
      ...batches.map(batch => 
        `${batch.batchNumber},${batch.type},${batch.date},${batch.description},${batch.quantity},${batch.status},${new Date(batch.timestamp).toLocaleString()}`
      )
    ].join('\n')
    
    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = 'batch_numbers.csv'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
    toast.success("Batch numbers exported to CSV")
  }

  const clearBatches = () => {
    setBatches([])
    setConfig(prev => ({ ...prev, startSequence: 1 }))
    toast.success("All batches cleared")
  }

  const previewBatchNumber = () => {
    return generateBatchNumber(config.startSequence)
  }

  const getBatchTypeInfo = (type: string) => {
    return batchTypes.find(t => t.id === type) || batchTypes[0]
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800'
      case 'completed': return 'bg-blue-100 text-blue-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="flex items-center gap-3 mb-6">
        <Hash className="h-8 w-8 text-slate-600" />
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Batch Number Generator</h1>
          <p className="text-gray-600">Generate unique batch numbers for production, materials, and quality control</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Configuration Panel */}
        <div className="lg:col-span-1 space-y-6">
          {/* Batch Type */}
          <Card>
            <CardHeader className="pb-4">
              <CardTitle>Batch Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="type">Batch Type</Label>
                <Select 
                  value={config.type} 
                  onValueChange={(value: any) => {
                    const typeInfo = getBatchTypeInfo(value)
                    setConfig(prev => ({ ...prev, type: value, prefix: typeInfo.prefix }))
                  }}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {batchTypes.map(type => (
                      <SelectItem key={type.id} value={type.id}>
                        {type.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="prefix">Prefix</Label>
                <Input
                  id="prefix"
                  value={config.prefix}
                  onChange={(e) => setConfig(prev => ({ ...prev, prefix: e.target.value.toUpperCase() }))}
                />
              </div>

              <div>
                <Label htmlFor="separator">Separator</Label>
                <Select 
                  value={config.separator} 
                  onValueChange={(value) => setConfig(prev => ({ ...prev, separator: value }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="-">Hyphen (-)</SelectItem>
                    <SelectItem value="_">Underscore (_)</SelectItem>
                    <SelectItem value=".">Period (.)</SelectItem>
                    <SelectItem value="none">None</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Date/Time Configuration */}
          <Card>
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Date & Time
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="includeDate"
                  checked={config.includeDate}
                  onChange={(e) => setConfig(prev => ({ ...prev, includeDate: e.target.checked }))}
                />
                <Label htmlFor="includeDate">Include Date</Label>
              </div>

              {config.includeDate && (
                <div>
                  <Label htmlFor="dateFormat">Date Format</Label>
                  <Select 
                    value={config.dateFormat} 
                    onValueChange={(value: any) => setConfig(prev => ({ ...prev, dateFormat: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="YYYYMMDD">YYYYMMDD (20241219)</SelectItem>
                      <SelectItem value="YYMMDD">YYMMDD (241219)</SelectItem>
                      <SelectItem value="MMDDYY">MMDDYY (121924)</SelectItem>
                      <SelectItem value="DDMMYY">DDMMYY (191224)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              )}

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="includeTime"
                  checked={config.includeTime}
                  onChange={(e) => setConfig(prev => ({ ...prev, includeTime: e.target.checked }))}
                />
                <Label htmlFor="includeTime">Include Time (HHMM)</Label>
              </div>
            </CardContent>
          </Card>

          {/* Sequence Configuration */}
          <Card>
            <CardHeader>
              <CardTitle>Sequence Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <Label htmlFor="sequenceLength">Sequence Length</Label>
                  <Input
                    id="sequenceLength"
                    type="number"
                    min="1"
                    max="8"
                    value={config.sequenceLength}
                    onChange={(e) => setConfig(prev => ({ ...prev, sequenceLength: Number(e.target.value) }))}
                  />
                </div>
                <div>
                  <Label htmlFor="startSequence">Start Number</Label>
                  <Input
                    id="startSequence"
                    type="number"
                    min="1"
                    value={config.startSequence}
                    onChange={(e) => setConfig(prev => ({ ...prev, startSequence: Number(e.target.value) }))}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="count">Generate Count</Label>
                <Input
                  id="count"
                  type="number"
                  min="1"
                  max="50"
                  value={config.count}
                  onChange={(e) => setConfig(prev => ({ ...prev, count: Number(e.target.value) }))}
                />
              </div>
            </CardContent>
          </Card>

          {/* Batch Details */}
          <Card>
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-2">
                <Package className="h-5 w-5" />
                Batch Details
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="description">Description</Label>
                <Input
                  id="description"
                  placeholder="Batch description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                />
              </div>

              <div>
                <Label htmlFor="quantity">Quantity</Label>
                <Input
                  id="quantity"
                  type="number"
                  min="1"
                  value={quantity}
                  onChange={(e) => setQuantity(Number(e.target.value))}
                />
              </div>
            </CardContent>
          </Card>

          {/* Preview & Generate */}
          <Card>
            <CardHeader className="pb-4">
              <CardTitle>Preview & Generate</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>Preview:</Label>
                <div className="bg-gray-50 p-3 rounded border font-mono text-lg font-bold">
                  {previewBatchNumber()}
                </div>
              </div>

              <Button onClick={generateBatches} className="w-full">
                <RefreshCw className="h-4 w-4 mr-2" />
                Generate {config.count} Batch{config.count > 1 ? 'es' : ''}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Generated Batches */}
        <div className="lg:col-span-2 space-y-6">
          {/* Header Controls */}
          <Card>
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center justify-between">
                <span>Generated Batches ({batches.length})</span>
                <div className="flex gap-2">
                  {batches.length > 0 && (
                    <>
                      <Button variant="outline" onClick={exportBatches}>
                        <Download className="h-4 w-4 mr-2" />
                        Export CSV
                      </Button>
                      <Button variant="outline" onClick={clearBatches}>
                        <FileText className="h-4 w-4 mr-2" />
                        Clear All
                      </Button>
                    </>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
          </Card>

          {/* Batches List */}
          {batches.length > 0 ? (
            <div className="space-y-3">
              {batches.map((batch) => {
                const typeInfo = getBatchTypeInfo(batch.type)
                return (
                  <Card key={batch.id}>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3">
                            <div className="font-mono text-lg font-bold">
                              {batch.batchNumber}
                            </div>
                            <Badge className={typeInfo.color}>
                              {typeInfo.name}
                            </Badge>
                            <Badge className={getStatusColor(batch.status)}>
                              {batch.status.toUpperCase()}
                            </Badge>
                          </div>
                          <div className="text-sm text-gray-600 mt-1">
                            {batch.description} • Qty: {batch.quantity} • {new Date(batch.timestamp).toLocaleString()}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {batch.status === 'active' && (
                            <>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => updateBatchStatus(batch.id, 'completed')}
                              >
                                Complete
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => updateBatchStatus(batch.id, 'cancelled')}
                              >
                                Cancel
                              </Button>
                            </>
                          )}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => copyToClipboard(batch.batchNumber)}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      
                      {/* Metadata */}
                      <div className="mt-3 pt-3 border-t">
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs">
                          <div>
                            <span className="text-gray-500">Sequence:</span>
                            <div className="font-medium">#{batch.sequence}</div>
                          </div>
                          <div>
                            <span className="text-gray-500">Date:</span>
                            <div className="font-medium">{new Date(batch.date).toLocaleDateString()}</div>
                          </div>
                          <div>
                            <span className="text-gray-500">Quantity:</span>
                            <div className="font-medium">{batch.quantity}</div>
                          </div>
                          <div>
                            <span className="text-gray-500">Status:</span>
                            <div className="font-medium capitalize">{batch.status}</div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          ) : (
            <Card>
              <CardContent className="flex items-center justify-center h-64">
                <div className="text-center">
                  <Hash className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Batches Generated</h3>
                  <p className="text-gray-600">Configure your batch settings and generate your first batch numbers</p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
}